name: GPU Build
# We can't test running on a GPU using GitHub hosted runners but we can test
#building

on: [push]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        gpu-backend: ['CUDA', 'HIP', 'SYCL']
                
    name: ${{ matrix.gpu-backend }} 
    env:
      AMREX_HOME: ${{ github.workspace }}/amrex
      TESTS_DIR: ${{ github.workspace }}/GRAMReX/Tests
      BUILD_ARGS: USE_${{ matrix.gpu-backend }}=TRUE DEBUG=TRUE USE_MPI=TRUE 

    steps:
    - name: Checkout AMReX
      uses: actions/checkout@v3
      with:
        repository: AMReX-Codes/amrex
        path: amrex

    - name: Checkout ${{ github.repository }}
      uses: actions/checkout@v3
      with:
        path: GRTeclyn
        submodules: true

    - name: Set up additional repositories
      run: |
        if [[ "${{ matrix.gpu-backend }}" == "CUDA" ]]; then
          curl -O https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb
          sudo dpkg -i cuda-keyring_1.1-1_all.deb
        elif [[ "${{ matrix.gpu-backend }}" == "HIP" ]]; then
          sudo mkdir --parents --mode=0755 /etc/apt/keyrings
          wget https://repo.radeon.com/rocm/rocm.gpg.key -O - | gpg --dearmor |\
          sudo tee /etc/apt/keyrings/rocm.gpg > /dev/null
          echo "deb [arch=amd64 signed-by=/etc/apt/keyrings/rocm.gpg] \
          https://repo.radeon.com/rocm/apt/debian jammy main" | sudo tee \
          /etc/apt/sources.list.d/rocm.list
          # Prefer AMD packages over system ones
          echo -e 'Package: *\nPin: release o=repo.radeon.com\nPin-Priority: 600' \
          | sudo tee /etc/apt/preferences.d/rocm-pin-600
        elif [[ "${{matrix.gpu-backend }}" == "SYCL" ]]; then
          wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB \
          | gpg --dearmor | sudo tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null
          echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] \
          https://apt.repos.intel.com/oneapi all main" | sudo tee \
          /etc/apt/sources.list.d/oneAPI.list
        fi

    - name: Update package manager database
      id: update-database
      continue-on-error: true
      run: sudo apt-get update

      # This is quite slow so only do this if the previous command fails
    - name: Update package repository mirrors if necessary
      if: steps.update-database.outcome == 'failure'
      run: |
        sudo gem install apt-spy2
        sudo apt-spy2 fix --commit --launchpad --country=US
        sudo apt-get update

    - name: Install dependencies
      # These have been copied/adapted from 
      run: |
        if [[ "${{ matrix.gpu-backend }}" == "CUDA" ]]; then
          PACKAGES="libmpich-dev
          cuda-command-line-tools-12-2
          cuda-compiler-12-2
          cuda-cupti-dev-12-2
          cuda-minimal-build-12-2
          cuda-nvml-dev-12-2
          cuda-nvtx-12-2
          libcurand-dev-12-2"
        elif [[ "${{ matrix.gpu-backend }}" == "HIP" ]]; then
          PACKAGES="libmpich-dev
          rocm-dev
          roctracer-dev
          rocprofiler-dev
          rocrand-dev
          rocprim-dev"
        elif [[ "${{ matrix.gpu-backend }}" == "SYCL" ]]; then
          PACKAGES="intel-oneapi-compiler-dpcpp-cpp
          intel-oneapi-compiler-fortran
          intel-oneapi-mkl-devel
          intel-oneapi-mpi-devel"
        fi
        sudo apt-get -y --no-install-recommends install $PACKAGES

    - name: Set Compilers
      id: set-compilers
      run: |
        if [[ "${{ matrix.gpu-backend }}" == "CUDA" ]]; then
          export PATH=/usr/local/cuda-12.2/bin${PATH:+:${PATH}}
          which nvcc || echo "nvcc not in PATH!"
          echo "mpich_cxx=g++" >> $GITHUB_OUTPUT
        elif [[ "${{ matrix.gpu-backend }}" == "HIP" ]]; then
          source /etc/profile.d/rocm.sh
          hipcc --version
          which clang
          which clang++
          which flang
          echo "mpich_cxx=hipcc" >> $GITHUB_OUTPUT
        elif [[ "${{ matrix.gpu-backend }}" == "SYCL" ]]; then
          source /opt/intel/oneapi/setvars.sh
          which icpx
        fi

    - name: Build Tests and BinaryBH example
      working-directory: GRTeclyn
      run: |
        if [[ "${{ matrix.gpu-backend }}" == "SYCL" ]]; then
          export I_MPI_CXX=icpx
        else
          export MPICH_CXX=${{ steps.set-compilers.outputs.mpich_cxx }}
        fi
        make all -j 4 ${{ env.BUILD_ARGS }}
